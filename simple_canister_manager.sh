#!/bin/bash

# Simple Canister ID Manager (No external dependencies)
# Updates canister IDs and documentation automatically

set -e

echo "🔧 AxiaSystem Simple Canister ID Manager"
echo "======================================="

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

PROJECT_ROOT="/home/woodrowlove/AxiaSystem"
CANISTER_IDS_JSON="$PROJECT_ROOT/canister_ids.json"

log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# Function to get current canister IDs (simple version)
get_current_canister_ids() {
    local network=${1:-local}
    
    log_info "Retrieving canister IDs for network: $network"
    
    # Create canister_ids.json
    echo "{" > "$CANISTER_IDS_JSON"
    
    # List of known canisters
    local canisters=("AxiaSystem_backend" "admin2" "asset" "asset_registry" "escrow" "governance" "identity" "nft" "payment" "payment_monitoring" "payout" "split_payment" "namora_ai" "subscriptions" "token" "treasury" "user" "wallet")
    
    local first=true
    
    for canister in "${canisters[@]}"; do
        # Try to get canister ID
        local canister_id=""
        if [[ "$network" == "local" ]]; then
            canister_id=$(dfx canister id "$canister" 2>/dev/null || echo "")
        else
            canister_id=$(dfx canister id "$canister" --network "$network" 2>/dev/null || echo "")
        fi
        
        if [[ -n "$canister_id" ]]; then
            if [[ "$first" == "false" ]]; then
                echo "," >> "$CANISTER_IDS_JSON"
            fi
            echo "  \"$canister\": \"$canister_id\"" >> "$CANISTER_IDS_JSON"
            log_success "Found $canister: $canister_id"
            first=false
        fi
    done
    
    echo "}" >> "$CANISTER_IDS_JSON"
    log_success "Updated $CANISTER_IDS_JSON"
}

# Function to update documentation
update_documentation() {
    log_info "Updating documentation with current canister IDs"
    
    if [[ ! -f "$CANISTER_IDS_JSON" ]]; then
        log_error "canister_ids.json not found. Run with --fetch first."
        return 1
    fi
    
    # Extract key canister IDs using grep
    local asset_canister=$(grep "asset.*:" "$CANISTER_IDS_JSON" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
    local asset_registry_canister=$(grep "asset_registry.*:" "$CANISTER_IDS_JSON" | sed 's/.*"\([^"]*\)".*/\1/')
    local user_canister=$(grep "user.*:" "$CANISTER_IDS_JSON" | sed 's/.*"\([^"]*\)".*/\1/')
    local backend_canister=$(grep "AxiaSystem_backend.*:" "$CANISTER_IDS_JSON" | sed 's/.*"\([^"]*\)".*/\1/')
    
    # Update documentation files
    for doc_file in "$PROJECT_ROOT/documentation"/*.md; do
        if [[ -f "$doc_file" ]]; then
            local updated=false
            
            # Asset canister ID updates
            if [[ -n "$asset_canister" ]] && grep -q "bw4dl-smaaa-aaaaa-qaacq-cai\|asset-canister-id" "$doc_file"; then
                sed -i "s/bw4dl-smaaa-aaaaa-qaacq-cai/$asset_canister/g" "$doc_file"
                sed -i "s/asset-canister-id/$asset_canister/g" "$doc_file"
                updated=true
            fi
            
            # Asset registry canister ID updates
            if [[ -n "$asset_registry_canister" ]] && grep -q "asset-registry-canister-id\|ucwa4-rx777-77774-qaada-cai" "$doc_file"; then
                sed -i "s/asset-registry-canister-id/$asset_registry_canister/g" "$doc_file"
                sed -i "s/ucwa4-rx777-77774-qaada-cai/$asset_registry_canister/g" "$doc_file"
                updated=true
            fi
            
            if [[ "$updated" == "true" ]]; then
                log_success "Updated $(basename "$doc_file")"
            fi
        fi
    done
}

# Function to generate frontend config
generate_frontend_config() {
    log_info "Generating frontend canister configuration"
    
    if [[ ! -f "$CANISTER_IDS_JSON" ]]; then
        log_error "canister_ids.json not found. Run with --fetch first."
        return 1
    fi
    
    # Create frontend config directory
    mkdir -p "$PROJECT_ROOT/src/config"
    
    # Generate JavaScript canister configuration
    cat > "$PROJECT_ROOT/src/config/canister-ids.js" << EOF
// Auto-generated canister IDs - DO NOT EDIT MANUALLY
// Generated by simple_canister_manager.sh on $(date)

export const CANISTER_IDS = $(cat "$CANISTER_IDS_JSON");

// Individual canister exports for convenience
EOF
    
    # Add individual exports
    while IFS= read -r line; do
        if [[ "$line" =~ \"([^\"]+)\":[[:space:]]*\"([^\"]+)\" ]]; then
            canister_name="${BASH_REMATCH[1]}"
            canister_id="${BASH_REMATCH[2]}"
            echo "export const ${canister_name^^}_CANISTER_ID = \"$canister_id\";" >> "$PROJECT_ROOT/src/config/canister-ids.js"
        fi
    done < "$CANISTER_IDS_JSON"
    
    cat >> "$PROJECT_ROOT/src/config/canister-ids.js" << EOF

// Network detection helper
export const getCanisterIds = (network = 'local') => {
  return CANISTER_IDS;
};

// Environment detection
export const getCurrentNetwork = () => {
  if (typeof window !== 'undefined') {
    const hostname = window.location.hostname;
    if (hostname.includes('ic0.app') || hostname.includes('icp0.io')) return 'ic';
    if (hostname.includes('testnet')) return 'testnet';
    return 'local';
  }
  return 'local';
};
EOF

    log_success "Generated src/config/canister-ids.js"
}

# Function to display current status
show_status() {
    log_info "Current Canister Status:"
    
    if [[ -f "$CANISTER_IDS_JSON" ]]; then
        echo ""
        while IFS= read -r line; do
            if [[ "$line" =~ \"([^\"]+)\":[[:space:]]*\"([^\"]+)\" ]]; then
                printf "  %-20s %s\n" "${BASH_REMATCH[1]}:" "${BASH_REMATCH[2]}"
            fi
        done < "$CANISTER_IDS_JSON"
    else
        echo "  No canister IDs file found."
    fi
    echo ""
}

# Function to validate canister IDs
validate_canister_ids() {
    log_info "Validating canister IDs"
    
    if [[ ! -f "$CANISTER_IDS_JSON" ]]; then
        log_error "canister_ids.json not found"
        return 1
    fi
    
    local valid=true
    
    while IFS= read -r line; do
        if [[ "$line" =~ \"([^\"]+)\":[[:space:]]*\"([^\"]+)\" ]]; then
            local canister="${BASH_REMATCH[1]}"
            local id="${BASH_REMATCH[2]}"
            
            # Basic canister ID format validation
            if [[ "$id" =~ ^[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{3}$ ]]; then
                log_success "Valid ID for $canister: $id"
            else
                log_error "Invalid ID format for $canister: $id"
                valid=false
            fi
        fi
    done < "$CANISTER_IDS_JSON"
    
    if [[ "$valid" == "true" ]]; then
        log_success "All canister IDs are valid"
        return 0
    else
        log_error "Some canister IDs are invalid"
        return 1
    fi
}

# Main execution
case "${1:-}" in
    --fetch)
        NETWORK=${2:-local}
        get_current_canister_ids "$NETWORK"
        ;;
    --update-docs)
        update_documentation
        ;;
    --generate-frontend)
        generate_frontend_config
        ;;
    --validate)
        validate_canister_ids
        ;;
    --status)
        show_status
        ;;
    --all)
        NETWORK=${2:-local}
        log_info "Running complete canister ID update for network: $NETWORK"
        get_current_canister_ids "$NETWORK"
        update_documentation
        generate_frontend_config
        validate_canister_ids
        show_status
        log_success "Complete canister ID update finished!"
        ;;
    --help|-h)
        echo "AxiaSystem Simple Canister ID Manager"
        echo ""
        echo "Usage: $0 [COMMAND] [OPTIONS]"
        echo ""
        echo "Commands:"
        echo "  --fetch [network]      Fetch current canister IDs (default: local)"
        echo "  --update-docs          Update documentation with current IDs"
        echo "  --generate-frontend    Generate frontend configuration files"
        echo "  --validate             Validate canister ID formats"
        echo "  --status               Show current canister status"
        echo "  --all [network]        Run all updates (default: local)"
        echo "  --help, -h             Show this help message"
        echo ""
        echo "Examples:"
        echo "  $0 --fetch local       # Fetch local canister IDs"
        echo "  $0 --all local         # Complete local update"
        echo "  $0 --status            # Show current status"
        echo ""
        ;;
    *)
        log_info "Running default: fetch local canister IDs and update"
        get_current_canister_ids "local"
        update_documentation
        generate_frontend_config
        show_status
        log_success "Basic update complete. Use --help for more options."
        ;;
esac
